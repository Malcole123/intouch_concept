<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="../css/user.css" />
    <!----Font Awesome CDN-->
    <link
      rel="stylesheet"
      href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <!----Boot-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
    <title>Intouch|Employer Registration</title>
  </head>
  <body>
    <section class="main">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 col-md-12 col-lg-6">
                    <h1>Access the ultimate talent network</h1>
                    <img src="../images/loginill.png" alt="Join the ultimate talent network">
                </div>
                <div class="col-sm-12 col-md-12 col-lg-6">
                    <div class="sign-up-form">
                        <h3>Sign Up</h3>
                        <div class="form-feedback">
                          <p id="formFeedBack"></p>
                        </div>
                        <form class="needs-validation" id="register-form" method="POST" @submit.prevent="processForm" novalidate @change ="checkFormReady">
                            <div class="row g-2">
                                <div class="col">
                                  <div class="form-floating">
                                    <input type="text" class="form-control" id="firstNameInput" placeholder="John" v-model.trim="firstName" @blur="checkFirst">
                                    <label for="firstNameInput">First name:</label>
                                    <div class="invalid-feedback" v-if>
                                       Please check your first name
                                        </div>
                                  </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                      <input type="text" class="form-control" id="lastNameInput" placeholder="Doe" v-model.trim="lastName" @blur="checkLast">
                                      <label for="lastNameInput">Last name:</label>
                                      <div class="invalid-feedback">
                                        Please check your last name
                                        </div>
                                    </div>
                                  </div>
                              </div>
                              <div class="row g-2 mt-2">
                                <div class="col">
                                  <div class="form-floating">
                                    <input type="email" class="form-control" id="emailInput" placeholder="name@example.com" v-model.trim="email" @blur="verifyEmail">
                                    <label for="emailInput">Email address:</label>
                                    <div class="invalid-feedback">
                                        {{errorMsg.email}}
                                    </div>

                                  </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                      <input type="text" class="form-control" id="phoneInput" placeholder="123-555-5678" v-model="phoneNumber" @blur="verifyPhone" @keyup="phoneformatter">
                                      <label for="phoneInput">Phone number:</label>
                                      <div class="invalid-feedback">
                                        {{errorMsg.phoneNumber}}
                                        </div>
                                    </div>
                                </div>
                              </div>
                              <div class="row g-2 mt-2">
                                <div class="col">
                                  <div class="form-floating">
                                    <input type="text" class="form-control" id="companyInput" placeholder="Company LLC" v-model.trim="company" @blur="checkCompany">
                                    <label for="companyInput">Company/Business:</label>
                                    <div class="invalid-feedback">
                                        {{errorMsg.company}}
                                    </div>

                                  </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                      <input type="text" class="form-control" id="countryInput" placeholder="Jamaica" v-model.trim="country">
                                      <label for="countryInput">Country:</label>
                                      <div class="invalid-feedback">
                                        {{errorMsg.country}}
                                        </div>
                                    </div>
                                </div>
                              </div>
                              <div class="row g-2 mt-2">
                                <div class="col">
                                  <div class="form-floating">
                                    <input type="password" class="form-control" id="createpasswordInput" placeholder="password" v-model.trim="password" @blur="checkPassReq">
                                    <label for="createpasswordInput">Create password:</label>
                                        <div class="invalid-feedback">
                                            {{errorMsg.passSet}}
                                        </div>
                                  </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                      <input type="password" class="form-control" id="confirmpasswordInput" placeholder="password" v-model.trim="passConfirm" @blur="checkPassMatch">
                                      <label for="confirmpasswordInput">Confirm password:</label>
                                      <div class="invalid-feedback">
                                        {{errorMsg.passConfirm}}
                                        </div>
                                    </div>
                                  </div>
                              </div>
                              <div class="row mt-2 d-none" id="passwordReqDisplay">
                                    <p>Your password must:</p>
                                    <div class="col-12 d-flex justify-content-start flex-wrap">
                                        <p class="pass-req"><i class="fas fa-check-double"></i> Be betweeen 8 -32 characters</p>
                                        <p class="pass-req"><i class="fas fa-check-double"></i> Must have atleast one uppercase letter.</p>
                                        <p class="pass-req"><i class="fas fa-check-double"></i> Must have atleast one number.</p>
                                    </div>
                              </div>
                              <div class="row mt-3">
                                <div class="col-12">
                                    <input class="form-check-input" type="checkbox" value="" id="termsandServiceagree" v-model="tosAgree" v-on:click="checkForErrors">
                                    <label class="form-check-label" for="termsandServiceagree">
                                      By signing up you agree to our <a href="#" class="text-primary pe-auto">terms and services </a>
                                    </label>
                                    <div class="invalid-feedback">
                                        {{errorMsg.tosAgree}}
                                    </div>

                                  </div>
                              </div>
                              <div class="row mt-3">
                                <div class="col-sm-6 col-md-6 col-lg-6">
                                    <button class="sendBtn" type="submit" v-show="formReady">
                                        Sign up <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                                <div class="col-sm-6 col-md-6 col-lg-6">
                                    <p class="user-redirects">Already have an account? <a href="/employer/login"> Log in</a></p>
                                </div>   
                              </div>         
                            
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <svg id="visual" viewBox="0 0 960 540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
            <path d="M0 467L137 407L274 411L411 434L549 412L686 475L823 417L960 480L960 541L823 541L686 541L549 541L411 541L274 541L137 541L0 541Z" fill="#3e3be8"></path>
            <path d="M0 486L137 453L274 453L411 471L549 479L686 449L823 483L960 452L960 541L823 541L686 541L549 541L411 541L274 541L137 541L0 541Z" fill="#3f3fc4"></path>
            <path d="M0 493L137 483L274 494L411 466L549 472L686 459L823 497L960 457L960 541L823 541L686 541L549 541L411 541L274 541L137 541L0 541Z" fill="#41409f"></path>
            <path d="M0 480L137 510L274 474L411 503L549 498L686 474L823 510L960 488L960 541L823 541L686 541L549 541L411 541L274 541L137 541L0 541Z" fill="#413f7a"></path>
            <path d="M0 520L137 519L274 518L411 507L549 498L686 516L823 507L960 514L960 541L823 541L686 541L549 541L411 541L274 541L137 541L0 541Z" fill="#3f3d56"></path>
        </svg>
    </section>
    <script>
      const rApp = new Vue({
    el:'#register-form',
    data:{
        firstName:'',
        lastName:'',
        email:'',
        phoneNumber:'',
        password:'',
        passConfirm:'',
        tosAgree:false,
        company:'',
        country:'',
        errors:{
            firstname:false,
            lastname:false,
            email:false,
            phoneNumber:false,
            passwordReq:false,
            passwordMatch:false,
            tosIgnored:false,
            companyError:false,
            countryError:false,
        },
        errorMsg:{
            email:"Invalid email",
            phoneNumber:"Please check phone number entered",
            passSet:"Your password does not meet requirements",
            passConfirm:"Your passwords do not match",
            tosAgree:"You must agree to our terms of service to continue",
            company:'Please enter a valid company name',
            country:'Please enter a valid country'
        },
        formReady:false
    },
    methods:{
        processForm:()=>{
            var sendData = {
                fn:rApp.firstName,
                ln:rApp.lastName,
                em:rApp.email,
                pn:rApp.phoneNumber,
                ps:rApp.password,
                tos:rApp.tosAgree,
                user_type:'client',
                company:'',
                country:'',
                end:'../employer/auth/register/client'
            };
            const processor = async ()=>{
                var r = await cEnroll(sendData.fn, sendData.ln, sendData.em, sendData.pn,sendData.ps, sendData.tos,sendData.user_type,sendData.end);
                if(r.completed){
                    window.location.pathname = "/onboarding/identity/verifyemail"  
                }else{
                    rApp.errorMsg.email = "User already exists"
                    setInvalid('emailInput');
                }            
            }
            processor()

        },
        checkFirst:()=>{
            var name = rApp.firstName;
            if(name.length > 0){
                setvalid('firstNameInput');
                rApp.errors.firstname = false;
                return true
            }else{
                setInvalid('firstNameInput');
                rApp.errors.firstname = true;
                return false
            }
        },
        checkLast:()=>{
            var name = rApp.lastName;
            if(name.length > 0){
                setvalid('lastNameInput');
                rApp.errors.lastname = false
                return true
            }else{
                setInvalid('lastNameInput');
                rApp.errors.lastname = true;
                return false
            }
        },
        verifyEmail:()=>{
            var email = rApp.email;
            let regex = new RegExp('[a-z0-9]+@[a-z]+\.[a-z]{2,3}');
            var rF = regex.test(email);
            if(email.length > 0){
                if(!rF){
                    setInvalid('emailInput');
                    rApp.errors.email = true;
                    return false
                }
                else{
                   setvalid('emailInput');
                   rApp.errors.email = false
                   return true
                }
            }
        },
        verifyPhone:()=>{
           if( rApp.phoneNumber.length > 0){
            if(rApp.phoneNumber.length === 14){
                setvalid('phoneInput');
                rApp.errors.phoneNumber = false;
                return true
            }else{
                setInvalid('phoneInput');
                rApp.errors.phoneNumber = true;
                return false
            }
           }
        },
        phoneformatter:()=>{
            var value = rApp.phoneNumber;
            const formatter = (value)=>{
                if(!value) return value;

                const phoneNumber = value.replace(/[^\d]/g,"");
                const phoneNumberLength = phoneNumber.length;
            
                if(phoneNumberLength < 4) return phoneNumber;
                if(phoneNumberLength < 7 ){
                    return `(${phoneNumber.slice(0,3)}) ${phoneNumber.slice(3)}`;
            
                }
                else{
                    return `(${phoneNumber.slice(0,3)}) ${phoneNumber.slice(3,6)}-${phoneNumber.slice(6,10)}`;
                }
            }
            const setter = ()=>{
                const formattedNum = formatter(value);
                rApp.phoneNumber = formattedNum;
            }
            setter()
        },
        checkPassReq:()=>{
            var val = rApp.password;
            const numberChecker = (str)=>{
                var numberFound = false;
                for(let i =0; i < str.length; i++){
                    var check = str[i];
                     var regex = /^[0-9]+$/;
                     if(regex.test(check)){
                         numberFound = true;
                         i =str.length
                     }
                }
                return numberFound
            }
            const caseChecker = (str)=>{
                var upperCaseFound = false;
                for(let i = 0; i < str.length; i++){
                    var checkLetter = str[i];
                    var regex = /^[A-Z]+$/;
                    if(regex.test(checkLetter)){
                        upperCaseFound = true;
                        i = str.length
                    }
                }
                return upperCaseFound
           }
            const lengthChecker = (str)=>{
               var lengthMet = false;
               if(str.length >= 8){
                   lengthMet = true
               }
               return lengthMet
           }
           var num = numberChecker(val);
           var cas = caseChecker(val);
           var len = lengthChecker(val);
           if(val.length > 0 ){
            if((num && cas)&&len){
                setvalid('createpasswordInput');
                rApp.errors.passwordReq = false;
                return true
            }else{
                setInvalid('createpasswordInput');
                rApp.errors.passwordReq = true;
                return false
            }
           }else{
               return false
           }
        },
        checkPassMatch:()=>{
            var val = rApp.passConfirm
            var compIn = document.querySelector('#createpasswordInput');
            var comp = compIn.value;
            if(val.length > 0){
                if(val === comp){
                    setvalid('confirmpasswordInput');
                    rApp.errors.passwordMatch = false;
                    return true
                }else{
                    setInvalid('confirmpasswordInput');
                    rApp.errors.passwordMatch = true;
                    return false
                }
            }else{
                return false
            }
        },
        checkCompany:()=>{
          var name = rApp.company;
            if(name.length > 0){
                setvalid('companyInput');
                rApp.errors.company = false;
                return true
            }else{
                setInvalid('companyInput');
                rApp.errors.company = true;
                return false
            }
        },
        checkCountry:()=>{
          
        },
        checkForErrors:()=>{
            var data = Object.values(rApp.errors);
            for(let i = 0; i < data.length; i++){
                if(data[i]){
                    i = data.length
                    return true
                }else{
                    return false
                }
            }
        },
        checkEmailUnique:async ()=>{
            const checkCall = await fetch('/user/finduser',{
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                },
                body:JSON.stringify({
                    email:rApp.email
                })
            }).then(res=>res.json())
            .then(data => {
                return data
            });
            if(checkCall.exists){
                rApp.errors.email = true;
                rApp.errorMsg.email = "User already exists";
                setInvalid('emailInput');
                return false
            }else{
                rApp.errors.email = false;
                rApp.errorMsg.email = "No errors found";
                setvalid('emailInput');
                return true
            }
            return checkCall;
        },
        checkFormReady:()=>{
            var fn, ln, em, pn, ps, pc,tos;
            fn = rApp.checkFirst();
            ln = rApp.checkLast();
            em = rApp.verifyEmail();
            pn = rApp.verifyPhone();
            ps = rApp.checkPassReq();
            pc = rApp.checkPassMatch();
            tos =rApp.tosAgree;
            
            if((fn && ln) && (em && pn) && (ps && pc) && tos){
                rApp.formReady = true
            }else{
                rApp.formReady = false
            }
        }
    }
})
const setInvalid = (id)=>{
    var target = document.getElementById(id);
    target.classList ="form-control is-invalid"
}

const setvalid = (id)=>{
    var target = document.getElementById(id);
    target.classList ="form-control is-valid"
}

const cEnroll = async (fn, ln, e , pn, p, tos,user_type,end)=>{
    var sData = {
        "fn":fn,
        "ln":ln,
        "e":e,
        "p":p,
        "pn":pn,
        "tos":tos,
        "user_type":user_type
    }
    const rData = await fetch(end, {
        method:'POST',
        headers:{
            "Content-Type":"application/json"
        },
        body:JSON.stringify(sData)
    }).then(res=>res.json())
    .then(data=>{
        return data
    })

    return rData
}


    </script>
  </body>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
</html>
